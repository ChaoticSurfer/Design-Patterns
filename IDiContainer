namespace DI;

public interface IDiContainer
{
    /// <summary>
    ///     Adds a service of the type specified in TService with an implementation
    ///     type specified in TImplementation to the DiContainer.
    /// </summary>
    public void Register<TService, TImplementation>() where TImplementation : TService;
    
    /// <summary>
    ///     Adds a service of the type specified in TService with an implementation
    ///     type specified in TImplementation to the DiContainer.
    /// </summary>
    /// <param name="serviceFactory">The factory that creates the service.</param>
    public void Register<TService, TImplementation>(Func<TService> serviceFactory) where TImplementation : TService;
   
   /// <summary>
    ///     Adds a service of the type specified in TService with an implementation
    ///     type specified in TService to the DiContainer.
    /// </summary>
    public void Register<TService>();
 
    /// <summary>
    ///     Adds a service of the type specified in TService with an implementation
    ///     type specified in TService to the DiContainer.
    /// </summary>
    /// <param name="instanceFactory">The factory that creates the service.</param>
    public void Register<TService>(Func<TService> instanceFactory);
 
    /// <summary>
    /// Returns implementation of type T
    /// </summary>
    public TService Resolve<TService>();
 
    /// <summary>
    /// Returns implementation of type specified in "type" parameter
    /// </summary>
    public object Resolve(Type type);
}
